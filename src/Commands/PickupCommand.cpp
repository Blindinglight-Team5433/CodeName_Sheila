// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "PickupCommand.h"

PickupCommand::PickupCommand() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void PickupCommand::Initialize() {

	
}

// Notes
// Actions are ENUMs but location switchs will be converted to inches
// GLOBAL things...
enum ELEVATOR_ACTIONS
{
    PICK,
    PLACE,
    ABORT,     // allows stopping of current action to start next action.
    MOVETO
};
float LastLocation = 0;   // remember locations are in inches
int LastAction = PLACE;
bool PickupComplete = true;  // Complete previous action before going to next action

// Called repeatedly when this Command is scheduled to run
void PickupCommand::Execute() {
	
	int Completed = false;
	float Location;

	    // Basically there are heights ("locations") to drive the elevator
	    Location = GetElevatorLocationSwitches();
	    // Debug here to display switches - make sure inputs are workign before testing rest of coed
	    // DebugMe("Loc to put stack is ",Location
	    // return;



}

// Make this return true when this Command no longer needs to run execute()
bool PickupCommand::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void PickupCommand::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void PickupCommand::Interrupted() {

}
