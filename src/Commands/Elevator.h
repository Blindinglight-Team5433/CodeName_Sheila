// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#ifndef ELEVATOR_H
#define ELEVATOR_H

#include "Commands/CommandGroup.h"
enum SIDE {LEFT,RIGHT,BOTH};
// all positions are in inches where 0 is the Home/Bottom location
#define ELEVATOR_HOME_POSITION (float)0
// Max allowable error between shafts
#define MAX_POS_ERROR (float)1
// How close before we think we are there.  1/8 inch
#define AT_POSITION (float).125
// If within this distance then don't adjust speeds
#define SIDES_SIMILAR (float).5
// Slow when within 1 inch of a speed zone
#define SPEED_ZONE (float)1
// THis is the speed reduction factor when in a speed zone
#define SPEED_REDUCTION (float).5
// Some elevator control stuff but I don't know were it should live.
// Will control all elements of driving the motor down to a location
// Returns
int DriveElevatorDown(float Height);
// Will control all elements of driving the motor down to a location
int DriveElevatorUp(float Height);
// DriveElevator will return an error code or POSITION_ACQUIRED
int DriveElevator(float Height);
float ElevatorSpeed(float DriveSide, float OtherSide, float TargetLocation);

// Cal information for Get Height **********************************************
// Sensors are a/d readings and the height is in inches
#define LEFT_TOP_SENS 43
#define LEFT_BOT_SENS 1000
#define RIGHT_TOP_SENS 50
#define RIGHT_BOT_SENS 1000
#define ELEVATOR_HEIGHT (float)20
#define LEFT_SCALE_INCH_PER (ELEVATOR_HEIGHT/(float)(LEFT_BOT_SENS - LEFT_TOP_SENS)
#define RIGHT_SCALE_INCH_PER (ELEVATOR_HEIGHT/(float)(RIGHT_BOT_SENS - RIGHT_TOP_SENS)
float GetHeight(SIDE Side);
void StopElevator(SIDE Side);   // stop the drive motors
void ElevatorMoveDown(SIDE Side, float Speed);
void ElevatorMoveUp(SIDE Side, float Speed);
//   Errors
#define OUT_OF_LEVEL -100
// ELevator RETURN CODES
#define POSITION_ACQUIRED 1
#define ELEVATOR_MOVING 2




// Utility functions
bool InRange(float Val1, float Val2, float Range);

// Table of locations where we might contact something so slow down
#define SPEED_TABLE_SIZE 4
float SPEED_TABLE[SPEED_TABLE_SIZE]
{
	0,  // this is at the stop position
	2,  // This is where we contact the tote for pickup
	4, 	// This is where we might contact the scoring platform
	14  // This is where we contact the tote for stacking on top
};

/**
 *
 *
 * @author ExampleAuthor
 */
class Elevator: public CommandGroup {
public:
	Elevator();
};

#endif
